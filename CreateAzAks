pipeline {
    agent any

    environment {
        ARM_SUBSCRIPTION_ID = credentials('azure-subscription-id')
        ARM_CLIENT_ID       = credentials('azure-client-id')
        ARM_CLIENT_SECRET   = credentials('azure-client-secret')
        ARM_TENANT_ID       = credentials('azure-tenant-id')
        // KUBECONFIG = credentials('kubeconfig-credential-id')
    }

    stages {
        // stage('Clone Repo') {
        //     steps {
        //         git 'https://github.com/gdlimbani/TF_AZ_ROLE_AKS.git'
        //     }
        // }

        stage('Terraform Init') {
            steps {
                script {
                    bat '''
                    terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    bat '''
                    terraform plan -out=tfplan -var-file=terraform.tfvars
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    bat '''
                    terraform apply -auto-approve tfplan
                    '''
                }
            }
        }

        stage('Save Kubeconfig') {
            steps {
                script {
                    // Retrieve kubeconfig from Terraform output and save to file
                    def kubeconfig = bat(script: 'terraform output -raw kubeconfig', returnStdout: true).trim()
                    writeFile(file: 'kubeconfig.yaml', text: kubeconfig)
                }
            }
        }

        // stage('Upload Kubeconfig to Jenkins') {
        //     steps {
        //         withCredentials([usernamePassword(credentialsId: 'jenkins-credentials', passwordVariable: 'JENKINS_PASS', usernameVariable: 'JENKINS_USER')]) {
        //             script {
        //                 bat '''
        //                 curl -u $JENKINS_USER:$JENKINS_PASS -X POST "http://localhost:100/credentials/store/system/domain/_/createCredentials" \
        //                 --data-urlencode 'json={
        //                   "": "0",
        //                   "credentials": {
        //                     "scope": "GLOBAL",
        //                     "id": "kubeconfig-credential-id",
        //                     "secretFile": "kubeconfig.yaml",
        //                     "description": "Kubeconfig for AKS",
        //                     "$class": "org.jenkinsci.plugins.plaincredentials.impl.FileCredentialsImpl"
        //                   }
        //                 }'
        //                 '''
        //             }
        //         }
        //     }
        // }

        stage('Apply Frontend Deployment') {
            steps {
                script {
                    bat 'kubectl apply -f frontend-deployment.yaml --namespace=gdlns --kubeconfig=kubeconfig.yaml'
                }
            }
        }

        stage('Apply Backend Deployment') {
            steps {
                script {
                    bat 'kubectl apply -f backend-deployment.yaml --namespace=gdlns --kubeconfig=kubeconfig.yaml'
                }
            }
        }

        stage('Apply Frontend Service') {
            steps {
                script {
                    bat 'kubectl apply -f frontend-service.yaml --namespace=gdlns --kubeconfig=kubeconfig.yaml'
                }
            }
        }

        stage('Apply Backend Service') {
            steps {
                script {
                    bat 'kubectl apply -f backend-service.yaml --namespace=gdlns --kubeconfig=kubeconfig.yaml'
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean the workspace no matter what
        }

        success {
            echo 'Deployment Successful!'
        }

        failure {
            echo 'Deployment Failed!'
        }
    }
}
